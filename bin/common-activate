#!/bin/bash
# -*- mode: sh; eol-unix -*-
#
# Minimal environment setup wrapper for bash/zsh.

# ---------------------------------------------------------------------------
# Verify that this script is being *sourced* (not executed).
# ---------------------------------------------------------------------------

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "Error: This script must be sourced, not executed." >&2
    exit 1
fi

# ---------------------------------------------------------------------------
# Detect OS and set VENV_BIN accordingly
# ---------------------------------------------------------------------------

if [[ -d ".venv/Scripts" ]]; then
    VENV_BIN=".venv/Scripts"
else
    VENV_BIN=".venv/bin"
fi
if [[ ! -d "$VENV_BIN" ]]; then
    echo "Error: This script must be run from the project root directory after setting up the virtual environment." >&2
    return 1 2>/dev/null || exit 1
fi
ACTIVATE_ORIGINAL="$VENV_BIN/activate"

# ---------------------------------------------------------------------------
# Make sure this script has been set up correctly
# ---------------------------------------------------------------------------
if [[ ! -f "$ACTIVATE_ORIGINAL" ]]; then
    echo "1. Copy $VENV_BIN/activate to $VENV_BIN/activate" >&2
    echo "2. Copy this script to $VENV_BIN/activate" >&2
    echo "3. Run $VENV_BIN/activate to activate the virtual environment with custom settings." >&2
    return 1 2>/dev/null || exit 1
fi

# ---------------------------------------------------------------------------
# Set environment variables
# ---------------------------------------------------------------------------

export PROJECT_DIR=$(pwd)

export CACHE_DIR="$PROJECT_DIR/.cache"
export HF_HUB_DISABLE_SYMLINKS_WARNING="1"
export JSII_SILENCE_WARNING_UNTESTED_NODE_VERSION="1"
export MYPY_CACHE_DIR="$PROJECT_DIR/.cache/.mypy_cache"
export MYPYPATH="$PROJECT_DIR/.cache/typings:$PROJECT_DIR/src"
export NODE_ENV="development"
export PATH="$PROJECT_DIR/bin:/c/Program Files/Git/usr/bin:$PATH"
export PYDEVD_WARN_SLOW_RESOLVE_TIMEOUT="5000"
export PYLINT_HOME="$PROJECT_DIR/.cache/pylint"
export PYLINTRC="$PROJECT_DIR/.pylintrc"
export PYTHONPATH="$PROJECT_DIR/src"
export PYTHONPYCACHEPREFIX="$PROJECT_DIR/.cache/__pycache__"
export RUFF_CACHE_DIR="$PROJECT_DIR/.cache/ruff"
export WITH_4BIT_QUANTIZATION="1"

# ---------------------------------------------------------------------------
# Deduplicate PATH-like variables
# ---------------------------------------------------------------------------

dedupe_path_var() {
    local var_name="$1"
    local orig_value="${!var_name}"
    [[ -z "$orig_value" ]] && return
    local cleaned=""
    local IFS=":"
    local path_array=($orig_value)
    for path in "${path_array[@]}"; do
        [[ -z "$path" ]] && continue  # Skip empty elements
        if [[ ":$cleaned:" != *":$path:"* ]]; then
            if [[ -n "$cleaned" ]]; then
                cleaned="$cleaned:$path"
            else
                cleaned="$path"
            fi
        fi
    done
    export "$var_name=$cleaned"
}
dedupe_path_var PATH

# ---------------------------------------------------------------------------
# Prevent the original activate script from corrupting PATH and PYTHONHOME
# ---------------------------------------------------------------------------

if [[ "${_OLD_VIRTUAL_PATH:-}" == *";"* ]]; then
    unset _OLD_VIRTUAL_PATH
fi
if [[ "${_OLD_VIRTUAL_PYTHONHOME:-}" == *"\\"* ]]; then
    unset _OLD_VIRTUAL_PYTHONHOME
fi

# ---------------------------------------------------------------------------
# Source the original activate script and return its exit code
# ---------------------------------------------------------------------------

source "$ACTIVATE_ORIGINAL"
exit_code=$?
return $exit_code
