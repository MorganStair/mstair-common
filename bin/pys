#!/usr/bin/env bash
# File: tools/bin/pys
# ------------------------------------------------------
# Summary:
#     Run a Python CLI from the current project.
# Usage:
#     pys TOOL [ARGS...]
# Exit codes:
#     0 = Success
#     2 = Usage error or CLI method not found
#     3 = Internal or virtual environment error
#     Other = Script-specific error
# ------------------------------------------------------

set -eu -o pipefail
if [ $# -lt 1 ]; then
  echo "Usage: pys TOOL [ARGS...]" >&2
  exit 2
fi

[ -n "$VERBOSE" ] && set -x || set +x

# ------------------------------------------------------
# CLI Script Existence Check:
# PROJECT_DIR = Project root directory.
# SRC         = Subdirectory for source code ("src").
# TOOL        = Tool name (without .py extension).
# ------------------------------------------------------

PROJECT_DIR="${PROJECT_DIR:-$(pwd)}"
SRC="src"
TOOL="$1"

# --------------------------------------
# Virtual Environment Activation:
# ACTIVATE = Script to activate virtual environment.
# --------------------------------------

# Resolve virtualenv Python executable cross-platform
PYTHON=""
for candidate in \
  "$PROJECT_DIR/.venv/bin/python" \
  "$PROJECT_DIR/.venv/bin/python3" \
  "$PROJECT_DIR/.venv/Scripts/python" \
  "$PROJECT_DIR/.venv/Scripts/python.exe"; do
    if [ -x "$candidate" ]; then
        PYTHON="$candidate"
        break
    fi
done
if [ -z "$PYTHON" ]; then
    echo "pys: Python executable not found in $PROJECT_DIR/.venv" >&2
    exit 3
fi

# Run the Script
# "$PYTHON" -W "ignore:.*found in sys\.modules.*" -P -s -m "$TOOL" "${@:2}"

"$PYTHON" -P -s - <<EOF
import warnings;
warnings.filterwarnings('ignore', message='.*found in sys\\.modules.*', category=RuntimeWarning);
import runpy;
runpy.run_module('${TOOL}', run_name='__main__');
EOF

exit $?
